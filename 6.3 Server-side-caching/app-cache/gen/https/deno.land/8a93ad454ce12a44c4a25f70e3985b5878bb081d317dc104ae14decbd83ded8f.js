import { InvalidStateError } from "./errors.ts";
import { readArrayReply } from "./protocol/mod.ts";
import { decoder } from "./protocol/_util.ts";
class RedisSubscriptionImpl {
  executor;
  get isConnected() {
    return this.executor.connection.isConnected;
  }
  get isClosed() {
    return this.executor.connection.isClosed;
  }
  channels;
  patterns;
  constructor(executor){
    this.executor = executor;
    this.channels = Object.create(null);
    this.patterns = Object.create(null);
  }
  async psubscribe(...patterns) {
    await this.executor.exec("PSUBSCRIBE", ...patterns);
    for (const pat of patterns){
      this.patterns[pat] = true;
    }
  }
  async punsubscribe(...patterns) {
    await this.executor.exec("PUNSUBSCRIBE", ...patterns);
    for (const pat of patterns){
      delete this.patterns[pat];
    }
  }
  async subscribe(...channels) {
    await this.executor.exec("SUBSCRIBE", ...channels);
    for (const chan of channels){
      this.channels[chan] = true;
    }
  }
  async unsubscribe(...channels) {
    await this.executor.exec("UNSUBSCRIBE", ...channels);
    for (const chan of channels){
      delete this.channels[chan];
    }
  }
  receive() {
    return this.#receive(false);
  }
  receiveBuffers() {
    return this.#receive(true);
  }
  async *#receive(binaryMode) {
    let forceReconnect = false;
    const connection = this.executor.connection;
    while(this.isConnected){
      try {
        let rep;
        try {
          // TODO: `readArrayReply` should not be called directly here
          rep = await readArrayReply(connection.reader, binaryMode);
        } catch (err) {
          if (err instanceof Deno.errors.BadResource) {
            // Connection already closed.
            connection.close();
            break;
          }
          throw err;
        }
        const event = rep[0] instanceof Uint8Array ? decoder.decode(rep[0]) : rep[0];
        if (event === "message" && rep.length === 3) {
          const channel = rep[1] instanceof Uint8Array ? decoder.decode(rep[1]) : rep[1];
          const message = rep[2];
          yield {
            channel,
            message
          };
        } else if (event === "pmessage" && rep.length === 4) {
          const pattern = rep[1] instanceof Uint8Array ? decoder.decode(rep[1]) : rep[1];
          const channel = rep[2] instanceof Uint8Array ? decoder.decode(rep[2]) : rep[2];
          const message = rep[3];
          yield {
            pattern,
            channel,
            message
          };
        }
      } catch (error) {
        if (error instanceof InvalidStateError || error instanceof Deno.errors.BadResource) {
          forceReconnect = true;
        } else throw error;
      } finally{
        if (!this.isClosed && !this.isConnected || forceReconnect) {
          await connection.reconnect();
          forceReconnect = false;
          if (Object.keys(this.channels).length > 0) {
            await this.subscribe(...Object.keys(this.channels));
          }
          if (Object.keys(this.patterns).length > 0) {
            await this.psubscribe(...Object.keys(this.patterns));
          }
        }
      }
    }
  }
  close() {
    this.executor.connection.close();
  }
}
export async function subscribe(executor, ...channels) {
  const sub = new RedisSubscriptionImpl(executor);
  await sub.subscribe(...channels);
  return sub;
}
export async function psubscribe(executor, ...patterns) {
  const sub = new RedisSubscriptionImpl(executor);
  await sub.psubscribe(...patterns);
  return sub;
}
//# sourceMappingURL=data:application/json;base64,